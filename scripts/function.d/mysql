. $NINJA_FUN_DIR/commons

ninja-start_mariadb_docker() {
  echo -e "\nThis will start a mariadb server in a docker container in interactive mode, \nand the docker will get removed when stopped."
  echo -e "\nUsage: start_mariadb_docker --port 3306 --root-pwd the-root-pwd --db_name mydb --db_user myuser --db_pass mypassword --sql_version 10.3 --volume /opt/data/mysql/keycloak"
  echo -e ""

  mysql_port="3306"
  root_password="root-password"
  db_name="mydb"
  db_user="myuser"
  db_pass="mypassword"
  sql_version="10.3"
  volume="/opt/data/mysql/keycloak"

  while (( "$#" )); do
    case "$1" in
    "--port"*)
      mysql_port="$2"
      ;;
    "--root-pwd"*)
      root_password="$2"
      ;;
    "--db_name"*)
      db_name="$2"
      ;;
    "--db_user"*)
      db_user="$2"
      ;;
    "--db_pass"*)
      db_pass="$2"
      ;;
    "--sql_version"*)
      sql_version="$2"
      ;;
    "--volume"*)
      volume="$2"
      ;;
    *)
      ;;
    esac

    shift
    shift
  done

  echo -e "Going to use the following command to start the mysql server:"
  docker_run_opts="--rm -p ${mysql_port}:3306 -e MYSQL_ROOT_PASSWORD=${root_password} -e MYSQL_DATABASE=${db_name} -e MYSQL_USER=${db_user} -e MYSQL_PASSWORD=${db_pass}"
  if [ -d "$volume" ]; then
    docker_run_opts="$docker_run_opts -v ${volume}:/var/lib/mysql"
  fi
  echo -e "\n\tdocker run ${docker_run_opts} docker.io/mariadb:${sql_version}"

  docker run ${docker_run_opts} docker.io/mariadb:${sql_version}
}

#
# $1: jdbc type: mysql, postgresql, mariadb
# $2: jdbc version
# it prints url that can be downloaded from maven central
__jdbc_driver_url_from_mvn__() {
  MVN_CENTRAL="http://repo.maven.apache.org/maven2"
  case "$1" in
    "mysql"*)
      echo -e "${MVN_CENTRAL}/mysql/mysql-connector-java/$2/mysql-connector-java-$2.jar"
      ;;
    "postgresql"*)
      echo -e "${MVN_CENTRAL}/org/postgresql/postgresq/$2/postgresq-$2.jar"
      ;;
    "mariadb"*)
      echo -e "${MVN_CENTRAL}/org/mariadb/jdbc/mariadb-java-client/$2/mariadb-java-client-$2.jar"
      ;;
    *)
      ;;
  esac
}

ninja-install_jdbc_module() {
  echo -e "\nThis installs a specified JDBC driver to WildFly/JBoss EAP module"
  echo -e "Common used JDBC drivers:\n"
  echo -e "JDBC Driver \t\t   Driver Version"
  echo -e "mysql       \t\t   5.1.47"
  echo -e "postgresql  \t\t   42.2.5"
  echo -e "mariadb     \t\t   2.4.1"
  echo -e "\n"

  echo -e "Usage: ninja-install_jdbc_module --jdbc mysql --version 5.1.47 --jboss_home ~/softwares/jboss-eap/jboss-eap-7.1 --jboss_module org.mysql"

  jdbc="mysql"
  jdbc_version="5.1.47"
  WF_HOME="$JBOSS_HOME"
  jboss_module="org.mysql"

  while (( "$#" )); do
    case "$1" in
    "--jdbc"*)
      jdbc="$2"
      ;;
    "--version"*)
      jdbc_version="$2"
      ;;
    "--jboss_home"*)
      WF_HOME="$2"
      ;;
    "--jboss_module"*)
      jboss_module="$2"
      ;;
    *)
      ;;
    esac

    shift
    shift
  done

  jdbcurl="`__jdbc_driver_url_from_mvn__ $jdbc $jdbc_version`"
  if [ "$jdbcurl" == "" ]; then
    echo -e "Wrong jdbc specified: $jdbc $jdbc_version"
    return
  fi


  jboss_module_base_dir="$WF_HOME/modules/system/layers/base"
  [ ! -d $jboss_module_base_dir ] && echo -e "'$WF_HOME' is not a valid jboss home" && return 1
  jboss_module_dir="${jboss_module_base_dir}/${jboss_module//\./\/}/main"
  [ -f "${jboss_module_dir}/module.xml" ] && echo -e "jboss module: $jboss_module has been created already!" && return 1
  echo -e "create jboss module directory: ${jboss_module_dir}"
  mkdir -p ${jboss_module_dir}
  
  echo -e "Downloading jdbc driver jar from $jdbcurl to ${jboss_module_dir}"
  wget -O ${jboss_module_dir}/$jdbc.jar "$jdbcurl"
  if [ $? != 0 ]; then
    echo -e "Failed to download jdbc driver from maven central repository"
    return 1
  fi
cat > ${jboss_module_dir}/module.xml <<JB_MOD_XML
<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.3" name="${jboss_module}">

    <resources>
        <resource-root path="$jdbc.jar"/>
    </resources>

    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
JB_MOD_XML
  
 echo -e "You have installed JDBC Driver of $jdbc to $WF_HOME with jboss module name: '$jboss_module'"
 echo -e "\nYou can use the following JBOSS CLI command to configure your JDBC driver and datasource:"
 echo -e "\n\t /subsystem=datasources/jdbc-driver=${jdbc}:add(driver-name=${jdbc},driver-module-name=${jboss_module})"
 echo -e "\n\t data-source add --name=xxxDS --jndi-name=java:jboss/datasources/xxxDS --connection-properties={"url": "jdbc:XXX:localhost:port/xxxDS"} --driver-name=${jdbc} --datasource-class=XXX"

}
